C++...
keywords
const 

constexpr	
	value of a variable or the return of a function can be evaluated at compile time


final
	used with function => function cannot be overrided
	used with class => class cannot be derived
	

pointers

shared pointers
	shared_ptr
	unique_ptr
	weak_ptr

lambda

rvalue
lvalue

rvalue references

move

-------------------------
containers
	std::array<>
	std::vector
	std::list

	std::stack
	std::queue
	std::deque

	std::set, 
	std::multiset, 
	std::unordered_set, 
	std::unordered_multiset
	
	std::map => association
	std::multimap, 
	std::unordered_map, 
	std::unordered_multimap

emplace_back
	constructs in place
push_back.. construct + copy/move

------------------------
Threads
creating threads
mutex
lock_guard
unique_lock
condition_variable
locks in threading
promise
async
future
producer consumer

race condition
deadlocks

semaphores


=====================================
compiler optimizations
-O0 => no optimization
-O1	basic optimizations
-O2	aggressive 
-O3	highest level of optimization
-Os	size optimization

Specific optimizations
-finline-functions
-funroll-loops
--fvectorize
-fomit-frame-pointers
-march=<cpu-architecture>
-mtune=<cpu-architecture>
-flto link-time optimizations

===============================
hot and cold 
hot => code that is executed very frequently  => optimizations can be done here..
cold => code that is not executed very frequently


profiling...
	perf
	gprof
	valgrind

Application level profiling
Google benchmark

-----------------------------------------------------------------------------------------------------------------------


malloc & new
	void*					object
	
	only allocates mem		allocate memory + object construction

	failure => nullptr		bad_alloc

	frequently				delete


----------------------------------------------------------------------------
std::atomic => internals


shared pointer..... 
	deallocater, 
	weak pointer...


new features in C++


make_shared..
	and direct pointer...
	The key difference between using std::make_shared and directly constructing a std::shared_ptr lies in how the memory for the managed object and the shared pointer's control block are allocated.

	1) single allocation
		std::make_shared allocates memory for both the object of type T and the shared pointer's control block (which stores the reference count and potentially custom deleters) in a single contiguous block of memory.

	2) efficiency: cache locality... object and the control block are close together in memory

	3) strong exception handling...

	In essence, std::make_shared is generally the preferred and safer way to create std::shared_ptr instances.

When to use the std::shared	
	1) When you want a std::shared_ptr to manage an object but point to a subobject within it (aliasing). std::make_shared doesn't directly support this.
	2) Interfacing with Legacy Code: In some cases, you might receive a raw pointer from older code that you need to wrap in a std::shared_ptr.

-------------
https://dev.to/pratikparvati/memory-management-using-smart-pointers-in-c-part-2-3pp4
control block in shared_ptr
	ref_count
	weak_ptr count
	actual raw pointer
	custom deleters (optional)
	custom allocator state (optional)

std::enable_shared_from_this
	class MyClass : public std::enable_shared_from_this<MyClass> {
		std::shared_ptr<MyClass> getShared()
		{
			return shared_from_this();
		}

	};
	getting shared_ptr in an instance method.	

------------------------
